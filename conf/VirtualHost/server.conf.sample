server {
    listen    80;
    listen    [::]:80;
    listen    88 proxy_protocol;		#四层代理配置
    listen    [::]:88 proxy_protocol;	#四层代理配置
    listen    443 ssl http2;
    listen    [::]:443 ssl http2;

    server_name  your_server_name;

    #charset koi8-r;

    # ----- WAF Config - Start -----
    include WAF.conf;
    # ----- WAF Config - END -----

    # ----- Log Config - Start -----
    access_log  conf/VirtualHost/your_server_name/logs/your_server_name.access.log  main;
    error_log   conf/VirtualHost/your_server_name/logs/your_server_name.error.log;
    # ----- Log Config - END -----

    # ----- SSL Config - Start -----
    
    # 自动跳转https站点,开启四层代理时需要关闭
    if ($server_port !~ 443){
        rewrite ^(/.*)$ https://$host$1 permanent;
    }

    # 证书文件
    ssl_certificate     VirtualHost/your_server_name/Certify/fullchain.pem;
    # 密钥文件
    ssl_certificate_key VirtualHost/your_server_name/Certify/privkey.pem;
    # TLS版本
    ssl_protocols       TLSv1.2 TLSv1.3;
    # 密码套件
    ssl_ciphers         ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS
    add_header           Strict-Transport-Security "max-age=63072000" always;

    # OCSP stapling
    #ssl_stapling        on;
    #ssl_stapling_verify on;

    # dhparam密钥
    ssl_dhparam          Certify/dhparam.pem;

    ssl_session_timeout  1d;
    ssl_session_cache    shared:MozSSL:10m;
    ssl_session_tickets  off;

    # ----- SSL Config - END -----
	
    location / {
        proxy_pass       your_server_url;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header REMOTE-HOST $remote_addr;
        # WebSocket代理
        #proxy_set_header Upgrade $http_upgrade;
        #proxy_set_header Connection "Upgrade";
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}